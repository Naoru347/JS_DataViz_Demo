PROJECT DUE DATE: INSHALLAH
PROJECT AUTHOR: J. M. PAIZ
PROJECT START DATE: 4 JANUARY 2023

1.) Project Objectives
To take a JSON data file from the company and transform that into a client-facing data visualization (Viz). The viz should color code the category data, presenting as a histogram with N along the y-axis and time-series along the x-axis. Along with this, the JSON data should also be converted into a table. The Viz should be dynamic in nature, updating as new data is added to the JSON file. 

2.) Process
I began by setting up my Git Repo to allow me to maintain version control and while working on the project, and to allow for sharing the code with the client upon project completion. The repo was set up at ../Naoru347/JS_DataViz_Demo using the following CLI commands: 
-mkdir JS_DataViz_Demo
-git init
-gh repo create
-git commit --set-upstream

I then proceeded to clearify certain points with the client, asking questions to better understand the format that incoming data would come in and what was driving the desire for the Viz to dynamic instead of static. I then began making my Punchlist, researching solution pathways, and setting up my documentation. 

From there, I started by making the HTML and CSS to govern the test space that I would be using as a demonstration platform to show the client the finished code. This involved creating a mock-up space in HTML to display the output of the various components, as well as a main CSS file to hold the standard formatting/display rules for the mock-up space. 

My next step was to create some dummy data in a JSON format. This involved using the columns as my keys and the row data as my values (key:value pairs), such that: "{"T1": 10, "T2": 20,...} for each row of my demo table. I then expanded this across three files for testing the app to ensure it properly updates. 

To further facilitate this, I added an drop-down select box to the presentation layer to select from three different data files. This is driven by CSS to style the element and hide the sub-elements until hover over, and JS to present the hidden elements and to drive the on-click evens using event listeners. 

A.1.) Technologies Used
---Git: version control
---HTML: presentation layer
----CSS: presentation layer
---JS: APP logic
----Chart.js: Data Visualization
